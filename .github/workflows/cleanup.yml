name: Cleanup Old Artifacts and Caches

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]
  schedule:
    - cron: '0 0 * * *' # every day at midnight UTC
  workflow_dispatch: # allow manual runs too

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const retentionDays = 1;
            const cutoff = new Date(Date.now() - retentionDays * 24 * 60 * 60 * 1000);

            const artifacts = await github.paginate(
              github.rest.actions.listArtifactsForRepo,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
              }
            );

            let deleted = 0;
            for (const artifact of artifacts) {
              const created = new Date(artifact.created_at);
              if (created < cutoff) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`üóëÔ∏è Deleted artifact: ${artifact.name}`);
                deleted++;
              }
            }

            console.log(`‚úÖ Cleanup complete. Deleted ${deleted} artifacts.`);

      - name: Delete old caches using GitHub REST API
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          echo "üßπ Deleting caches using REST API..."

          REPO="${{ github.repository }}"
          AUTH_HEADER="Authorization: token $GH_PAT"

          response=$(curl -s -H "$AUTH_HEADER" https://api.github.com/repos/$REPO/actions/caches)

          echo "$response" | jq -e '.actions_caches | length > 0' >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "$response" | jq -r '.actions_caches[].id' | while read -r cache_id; do
              echo "üóëÔ∏è Deleting cache ID: $cache_id"
              curl -s -X DELETE -H "$AUTH_HEADER" \
                https://api.github.com/repos/$REPO/actions/caches/$cache_id
            done
          else
            echo "‚úÖ No caches to delete."
          fi
